//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Puzzle"",
            ""id"": ""0feebf0e-dc0f-40ce-8ae4-30bb9e2e35fa"",
            ""actions"": [
                {
                    ""name"": ""C Key"",
                    ""type"": ""Button"",
                    ""id"": ""8882a75e-42e2-4a98-b57b-3abfebe57131"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""D Key"",
                    ""type"": ""Button"",
                    ""id"": ""15401883-a911-443a-a8f3-5fffd7ea20a4"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""E Key"",
                    ""type"": ""Button"",
                    ""id"": ""0e007c3f-355f-4252-b493-f352c3af91be"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""F Key"",
                    ""type"": ""Button"",
                    ""id"": ""2bf7ad67-da4b-494a-89a9-b4e77d1c676d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""G Key"",
                    ""type"": ""Button"",
                    ""id"": ""ade0ab06-fae1-40f1-a90d-f7fee9ef31f9"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""A Key"",
                    ""type"": ""Button"",
                    ""id"": ""5addd00f-84e2-4c19-9bf5-a434ba34231f"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""B Key"",
                    ""type"": ""Button"",
                    ""id"": ""eb5a940a-9785-47fc-ab38-1007f4511579"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""C Octave"",
                    ""type"": ""Button"",
                    ""id"": ""0de7e2a1-bbe7-47da-8e89-17e317af7c59"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""CSharp Key"",
                    ""type"": ""Button"",
                    ""id"": ""4768b4e3-8f56-4862-920c-4acac86d8afe"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DSharp Key"",
                    ""type"": ""Button"",
                    ""id"": ""69c260d6-231d-41b9-83ce-66876151a2e3"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""FSharp Key"",
                    ""type"": ""Button"",
                    ""id"": ""91267d99-f0fb-4c9d-9e5e-07cb38863f21"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""GSharp Key"",
                    ""type"": ""Button"",
                    ""id"": ""d60bf24a-49c7-4856-be91-a3bae2eaf83a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""ASharp Key"",
                    ""type"": ""Button"",
                    ""id"": ""ef786f24-aeeb-4962-a824-eb38bd9ca643"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""86417b9a-f880-4c4a-b602-b4539a4fe79d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8612b63d-878b-4fb6-9c9a-1bdb9da93f97"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""D Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e9fc3abd-9ecf-40a4-a5c0-49a631ffcfcf"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""E Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""350e834c-bf30-4750-b596-9c2fe3497402"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""F Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4e99d96d-f5f7-4367-b651-26c463e815be"",
                    ""path"": ""<Keyboard>/h"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""G Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0e02e815-ff4b-4200-b5fd-0b1b9748cde3"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""A Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c473075a-6a23-425c-84d2-2d7cdc9a9214"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""B Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""35418fd9-578e-4031-8fba-d0a207157540"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""C Octave"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4b5e1c3c-2c3c-48e1-bcbd-dca3a77afc72"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""CSharp Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e67c007c-d51b-4aa2-a65a-c44af89cef01"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DSharp Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""c88efb95-b656-439c-a39b-d015721c07aa"",
                    ""path"": ""<Keyboard>/g"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""FSharp Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bbe6745c-fabf-4864-a4f2-2f3e860494e1"",
                    ""path"": ""<Keyboard>/b"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""GSharp Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""bf5cfa2a-f879-4858-92c3-06765858a114"",
                    ""path"": ""<Keyboard>/n"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""ASharp Key"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Puzzle
        m_Puzzle = asset.FindActionMap("Puzzle", throwIfNotFound: true);
        m_Puzzle_CKey = m_Puzzle.FindAction("C Key", throwIfNotFound: true);
        m_Puzzle_DKey = m_Puzzle.FindAction("D Key", throwIfNotFound: true);
        m_Puzzle_EKey = m_Puzzle.FindAction("E Key", throwIfNotFound: true);
        m_Puzzle_FKey = m_Puzzle.FindAction("F Key", throwIfNotFound: true);
        m_Puzzle_GKey = m_Puzzle.FindAction("G Key", throwIfNotFound: true);
        m_Puzzle_AKey = m_Puzzle.FindAction("A Key", throwIfNotFound: true);
        m_Puzzle_BKey = m_Puzzle.FindAction("B Key", throwIfNotFound: true);
        m_Puzzle_COctave = m_Puzzle.FindAction("C Octave", throwIfNotFound: true);
        m_Puzzle_CSharpKey = m_Puzzle.FindAction("CSharp Key", throwIfNotFound: true);
        m_Puzzle_DSharpKey = m_Puzzle.FindAction("DSharp Key", throwIfNotFound: true);
        m_Puzzle_FSharpKey = m_Puzzle.FindAction("FSharp Key", throwIfNotFound: true);
        m_Puzzle_GSharpKey = m_Puzzle.FindAction("GSharp Key", throwIfNotFound: true);
        m_Puzzle_ASharpKey = m_Puzzle.FindAction("ASharp Key", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Puzzle
    private readonly InputActionMap m_Puzzle;
    private List<IPuzzleActions> m_PuzzleActionsCallbackInterfaces = new List<IPuzzleActions>();
    private readonly InputAction m_Puzzle_CKey;
    private readonly InputAction m_Puzzle_DKey;
    private readonly InputAction m_Puzzle_EKey;
    private readonly InputAction m_Puzzle_FKey;
    private readonly InputAction m_Puzzle_GKey;
    private readonly InputAction m_Puzzle_AKey;
    private readonly InputAction m_Puzzle_BKey;
    private readonly InputAction m_Puzzle_COctave;
    private readonly InputAction m_Puzzle_CSharpKey;
    private readonly InputAction m_Puzzle_DSharpKey;
    private readonly InputAction m_Puzzle_FSharpKey;
    private readonly InputAction m_Puzzle_GSharpKey;
    private readonly InputAction m_Puzzle_ASharpKey;
    public struct PuzzleActions
    {
        private @Controls m_Wrapper;
        public PuzzleActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @CKey => m_Wrapper.m_Puzzle_CKey;
        public InputAction @DKey => m_Wrapper.m_Puzzle_DKey;
        public InputAction @EKey => m_Wrapper.m_Puzzle_EKey;
        public InputAction @FKey => m_Wrapper.m_Puzzle_FKey;
        public InputAction @GKey => m_Wrapper.m_Puzzle_GKey;
        public InputAction @AKey => m_Wrapper.m_Puzzle_AKey;
        public InputAction @BKey => m_Wrapper.m_Puzzle_BKey;
        public InputAction @COctave => m_Wrapper.m_Puzzle_COctave;
        public InputAction @CSharpKey => m_Wrapper.m_Puzzle_CSharpKey;
        public InputAction @DSharpKey => m_Wrapper.m_Puzzle_DSharpKey;
        public InputAction @FSharpKey => m_Wrapper.m_Puzzle_FSharpKey;
        public InputAction @GSharpKey => m_Wrapper.m_Puzzle_GSharpKey;
        public InputAction @ASharpKey => m_Wrapper.m_Puzzle_ASharpKey;
        public InputActionMap Get() { return m_Wrapper.m_Puzzle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PuzzleActions set) { return set.Get(); }
        public void AddCallbacks(IPuzzleActions instance)
        {
            if (instance == null || m_Wrapper.m_PuzzleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PuzzleActionsCallbackInterfaces.Add(instance);
            @CKey.started += instance.OnCKey;
            @CKey.performed += instance.OnCKey;
            @CKey.canceled += instance.OnCKey;
            @DKey.started += instance.OnDKey;
            @DKey.performed += instance.OnDKey;
            @DKey.canceled += instance.OnDKey;
            @EKey.started += instance.OnEKey;
            @EKey.performed += instance.OnEKey;
            @EKey.canceled += instance.OnEKey;
            @FKey.started += instance.OnFKey;
            @FKey.performed += instance.OnFKey;
            @FKey.canceled += instance.OnFKey;
            @GKey.started += instance.OnGKey;
            @GKey.performed += instance.OnGKey;
            @GKey.canceled += instance.OnGKey;
            @AKey.started += instance.OnAKey;
            @AKey.performed += instance.OnAKey;
            @AKey.canceled += instance.OnAKey;
            @BKey.started += instance.OnBKey;
            @BKey.performed += instance.OnBKey;
            @BKey.canceled += instance.OnBKey;
            @COctave.started += instance.OnCOctave;
            @COctave.performed += instance.OnCOctave;
            @COctave.canceled += instance.OnCOctave;
            @CSharpKey.started += instance.OnCSharpKey;
            @CSharpKey.performed += instance.OnCSharpKey;
            @CSharpKey.canceled += instance.OnCSharpKey;
            @DSharpKey.started += instance.OnDSharpKey;
            @DSharpKey.performed += instance.OnDSharpKey;
            @DSharpKey.canceled += instance.OnDSharpKey;
            @FSharpKey.started += instance.OnFSharpKey;
            @FSharpKey.performed += instance.OnFSharpKey;
            @FSharpKey.canceled += instance.OnFSharpKey;
            @GSharpKey.started += instance.OnGSharpKey;
            @GSharpKey.performed += instance.OnGSharpKey;
            @GSharpKey.canceled += instance.OnGSharpKey;
            @ASharpKey.started += instance.OnASharpKey;
            @ASharpKey.performed += instance.OnASharpKey;
            @ASharpKey.canceled += instance.OnASharpKey;
        }

        private void UnregisterCallbacks(IPuzzleActions instance)
        {
            @CKey.started -= instance.OnCKey;
            @CKey.performed -= instance.OnCKey;
            @CKey.canceled -= instance.OnCKey;
            @DKey.started -= instance.OnDKey;
            @DKey.performed -= instance.OnDKey;
            @DKey.canceled -= instance.OnDKey;
            @EKey.started -= instance.OnEKey;
            @EKey.performed -= instance.OnEKey;
            @EKey.canceled -= instance.OnEKey;
            @FKey.started -= instance.OnFKey;
            @FKey.performed -= instance.OnFKey;
            @FKey.canceled -= instance.OnFKey;
            @GKey.started -= instance.OnGKey;
            @GKey.performed -= instance.OnGKey;
            @GKey.canceled -= instance.OnGKey;
            @AKey.started -= instance.OnAKey;
            @AKey.performed -= instance.OnAKey;
            @AKey.canceled -= instance.OnAKey;
            @BKey.started -= instance.OnBKey;
            @BKey.performed -= instance.OnBKey;
            @BKey.canceled -= instance.OnBKey;
            @COctave.started -= instance.OnCOctave;
            @COctave.performed -= instance.OnCOctave;
            @COctave.canceled -= instance.OnCOctave;
            @CSharpKey.started -= instance.OnCSharpKey;
            @CSharpKey.performed -= instance.OnCSharpKey;
            @CSharpKey.canceled -= instance.OnCSharpKey;
            @DSharpKey.started -= instance.OnDSharpKey;
            @DSharpKey.performed -= instance.OnDSharpKey;
            @DSharpKey.canceled -= instance.OnDSharpKey;
            @FSharpKey.started -= instance.OnFSharpKey;
            @FSharpKey.performed -= instance.OnFSharpKey;
            @FSharpKey.canceled -= instance.OnFSharpKey;
            @GSharpKey.started -= instance.OnGSharpKey;
            @GSharpKey.performed -= instance.OnGSharpKey;
            @GSharpKey.canceled -= instance.OnGSharpKey;
            @ASharpKey.started -= instance.OnASharpKey;
            @ASharpKey.performed -= instance.OnASharpKey;
            @ASharpKey.canceled -= instance.OnASharpKey;
        }

        public void RemoveCallbacks(IPuzzleActions instance)
        {
            if (m_Wrapper.m_PuzzleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPuzzleActions instance)
        {
            foreach (var item in m_Wrapper.m_PuzzleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PuzzleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PuzzleActions @Puzzle => new PuzzleActions(this);
    public interface IPuzzleActions
    {
        void OnCKey(InputAction.CallbackContext context);
        void OnDKey(InputAction.CallbackContext context);
        void OnEKey(InputAction.CallbackContext context);
        void OnFKey(InputAction.CallbackContext context);
        void OnGKey(InputAction.CallbackContext context);
        void OnAKey(InputAction.CallbackContext context);
        void OnBKey(InputAction.CallbackContext context);
        void OnCOctave(InputAction.CallbackContext context);
        void OnCSharpKey(InputAction.CallbackContext context);
        void OnDSharpKey(InputAction.CallbackContext context);
        void OnFSharpKey(InputAction.CallbackContext context);
        void OnGSharpKey(InputAction.CallbackContext context);
        void OnASharpKey(InputAction.CallbackContext context);
    }
}
