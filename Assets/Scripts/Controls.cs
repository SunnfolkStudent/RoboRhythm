//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/Scripts/Controls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @Controls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @Controls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""Controls"",
    ""maps"": [
        {
            ""name"": ""Puzzle"",
            ""id"": ""0feebf0e-dc0f-40ce-8ae4-30bb9e2e35fa"",
            ""actions"": [
                {
                    ""name"": ""AKey"",
                    ""type"": ""Button"",
                    ""id"": ""c72042f0-131e-4fec-bd16-859c53398629"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""SKey"",
                    ""type"": ""Button"",
                    ""id"": ""c9483e44-aad3-4f2e-ac72-4e4811e2a96a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""DKey"",
                    ""type"": ""Button"",
                    ""id"": ""07c90c0b-1ab0-43ea-adea-df5071e18366"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JKey"",
                    ""type"": ""Button"",
                    ""id"": ""821838f4-f03b-49f7-b9fc-9b1b678d0f45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""KKey"",
                    ""type"": ""Button"",
                    ""id"": ""fc3acf26-3e73-40e1-96ff-ce5714bf0759"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LKey"",
                    ""type"": ""Button"",
                    ""id"": ""a31e1f23-1546-4751-97bf-93252734fbaa"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""82e06973-3d97-4d93-a980-7e229834f434"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""AKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8586f855-134c-4538-97ac-991b8c852fd8"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""SKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e8738781-417f-4d64-94f5-fc1dac6222a6"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""DKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""4118ad1f-4ba2-4c8e-b8a6-7168dbdc8314"",
                    ""path"": ""<Keyboard>/j"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""a1618662-ce7c-412d-b852-1145152ddd82"",
                    ""path"": ""<Keyboard>/k"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""KKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""47c35a9f-1cb9-4f0d-9e05-81baa594da2e"",
                    ""path"": ""<Keyboard>/l"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LKey"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Player"",
            ""id"": ""d4dfd6d1-7511-4ab5-b8fb-fbf7298870fd"",
            ""actions"": [
                {
                    ""name"": ""Up"",
                    ""type"": ""Button"",
                    ""id"": ""bd79dae0-898e-4e09-9480-91c976907578"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Down"",
                    ""type"": ""Button"",
                    ""id"": ""7b0a6a9b-608d-47d7-a834-01e213f0192d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Left"",
                    ""type"": ""Button"",
                    ""id"": ""3719c7b1-f982-4f99-a6b5-0c61e9d16e5a"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Right"",
                    ""type"": ""Button"",
                    ""id"": ""11a0d2e9-ba64-4ab6-883d-5f3d4a9f69cd"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""ed60e9c1-16a9-44c8-a437-19a8f28c2a67"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Down"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""59cea285-93ef-471b-8fc9-41de66067f6d"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Left"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e51fdb94-03e0-44c0-9768-09d01ef32a2b"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Right"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""60b7d8e1-7c80-4875-81f1-46794a3dd3c2"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Up"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Puzzle
        m_Puzzle = asset.FindActionMap("Puzzle", throwIfNotFound: true);
        m_Puzzle_AKey = m_Puzzle.FindAction("AKey", throwIfNotFound: true);
        m_Puzzle_SKey = m_Puzzle.FindAction("SKey", throwIfNotFound: true);
        m_Puzzle_DKey = m_Puzzle.FindAction("DKey", throwIfNotFound: true);
        m_Puzzle_JKey = m_Puzzle.FindAction("JKey", throwIfNotFound: true);
        m_Puzzle_KKey = m_Puzzle.FindAction("KKey", throwIfNotFound: true);
        m_Puzzle_LKey = m_Puzzle.FindAction("LKey", throwIfNotFound: true);
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Up = m_Player.FindAction("Up", throwIfNotFound: true);
        m_Player_Down = m_Player.FindAction("Down", throwIfNotFound: true);
        m_Player_Left = m_Player.FindAction("Left", throwIfNotFound: true);
        m_Player_Right = m_Player.FindAction("Right", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Puzzle
    private readonly InputActionMap m_Puzzle;
    private List<IPuzzleActions> m_PuzzleActionsCallbackInterfaces = new List<IPuzzleActions>();
    private readonly InputAction m_Puzzle_AKey;
    private readonly InputAction m_Puzzle_SKey;
    private readonly InputAction m_Puzzle_DKey;
    private readonly InputAction m_Puzzle_JKey;
    private readonly InputAction m_Puzzle_KKey;
    private readonly InputAction m_Puzzle_LKey;
    public struct PuzzleActions
    {
        private @Controls m_Wrapper;
        public PuzzleActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @AKey => m_Wrapper.m_Puzzle_AKey;
        public InputAction @SKey => m_Wrapper.m_Puzzle_SKey;
        public InputAction @DKey => m_Wrapper.m_Puzzle_DKey;
        public InputAction @JKey => m_Wrapper.m_Puzzle_JKey;
        public InputAction @KKey => m_Wrapper.m_Puzzle_KKey;
        public InputAction @LKey => m_Wrapper.m_Puzzle_LKey;
        public InputActionMap Get() { return m_Wrapper.m_Puzzle; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PuzzleActions set) { return set.Get(); }
        public void AddCallbacks(IPuzzleActions instance)
        {
            if (instance == null || m_Wrapper.m_PuzzleActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PuzzleActionsCallbackInterfaces.Add(instance);
            @AKey.started += instance.OnAKey;
            @AKey.performed += instance.OnAKey;
            @AKey.canceled += instance.OnAKey;
            @SKey.started += instance.OnSKey;
            @SKey.performed += instance.OnSKey;
            @SKey.canceled += instance.OnSKey;
            @DKey.started += instance.OnDKey;
            @DKey.performed += instance.OnDKey;
            @DKey.canceled += instance.OnDKey;
            @JKey.started += instance.OnJKey;
            @JKey.performed += instance.OnJKey;
            @JKey.canceled += instance.OnJKey;
            @KKey.started += instance.OnKKey;
            @KKey.performed += instance.OnKKey;
            @KKey.canceled += instance.OnKKey;
            @LKey.started += instance.OnLKey;
            @LKey.performed += instance.OnLKey;
            @LKey.canceled += instance.OnLKey;
        }

        private void UnregisterCallbacks(IPuzzleActions instance)
        {
            @AKey.started -= instance.OnAKey;
            @AKey.performed -= instance.OnAKey;
            @AKey.canceled -= instance.OnAKey;
            @SKey.started -= instance.OnSKey;
            @SKey.performed -= instance.OnSKey;
            @SKey.canceled -= instance.OnSKey;
            @DKey.started -= instance.OnDKey;
            @DKey.performed -= instance.OnDKey;
            @DKey.canceled -= instance.OnDKey;
            @JKey.started -= instance.OnJKey;
            @JKey.performed -= instance.OnJKey;
            @JKey.canceled -= instance.OnJKey;
            @KKey.started -= instance.OnKKey;
            @KKey.performed -= instance.OnKKey;
            @KKey.canceled -= instance.OnKKey;
            @LKey.started -= instance.OnLKey;
            @LKey.performed -= instance.OnLKey;
            @LKey.canceled -= instance.OnLKey;
        }

        public void RemoveCallbacks(IPuzzleActions instance)
        {
            if (m_Wrapper.m_PuzzleActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPuzzleActions instance)
        {
            foreach (var item in m_Wrapper.m_PuzzleActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PuzzleActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PuzzleActions @Puzzle => new PuzzleActions(this);

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Up;
    private readonly InputAction m_Player_Down;
    private readonly InputAction m_Player_Left;
    private readonly InputAction m_Player_Right;
    public struct PlayerActions
    {
        private @Controls m_Wrapper;
        public PlayerActions(@Controls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Up => m_Wrapper.m_Player_Up;
        public InputAction @Down => m_Wrapper.m_Player_Down;
        public InputAction @Left => m_Wrapper.m_Player_Left;
        public InputAction @Right => m_Wrapper.m_Player_Right;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Up.started += instance.OnUp;
            @Up.performed += instance.OnUp;
            @Up.canceled += instance.OnUp;
            @Down.started += instance.OnDown;
            @Down.performed += instance.OnDown;
            @Down.canceled += instance.OnDown;
            @Left.started += instance.OnLeft;
            @Left.performed += instance.OnLeft;
            @Left.canceled += instance.OnLeft;
            @Right.started += instance.OnRight;
            @Right.performed += instance.OnRight;
            @Right.canceled += instance.OnRight;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Up.started -= instance.OnUp;
            @Up.performed -= instance.OnUp;
            @Up.canceled -= instance.OnUp;
            @Down.started -= instance.OnDown;
            @Down.performed -= instance.OnDown;
            @Down.canceled -= instance.OnDown;
            @Left.started -= instance.OnLeft;
            @Left.performed -= instance.OnLeft;
            @Left.canceled -= instance.OnLeft;
            @Right.started -= instance.OnRight;
            @Right.performed -= instance.OnRight;
            @Right.canceled -= instance.OnRight;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);
    public interface IPuzzleActions
    {
        void OnAKey(InputAction.CallbackContext context);
        void OnSKey(InputAction.CallbackContext context);
        void OnDKey(InputAction.CallbackContext context);
        void OnJKey(InputAction.CallbackContext context);
        void OnKKey(InputAction.CallbackContext context);
        void OnLKey(InputAction.CallbackContext context);
    }
    public interface IPlayerActions
    {
        void OnUp(InputAction.CallbackContext context);
        void OnDown(InputAction.CallbackContext context);
        void OnLeft(InputAction.CallbackContext context);
        void OnRight(InputAction.CallbackContext context);
    }
}
